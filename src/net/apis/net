os.loadAPI("apis/events")
os.loadAPI("apis/util")
os.loadAPI("apis/dns")

local state = util.initializeGlobalTable("net.state")

-- Modems
function detectModem()
	local sides = peripheral.getNames()
	for _, side in ipairs(sides) do
		if peripheral.getType(side) == "modem" and peripheral.call(side, "isWireless") then
			return side
		end
	end
	return nil
end

function openModem(side)
	if side == nil then
		side = detectModem()
		if side == nil then
			error("Unable to automatically detect modem -- did you attach one?")
		end
	end
	rednet.open(side)
	return side
end

-- Message delivery
function sendCore(destination, msg)
	local address = dns.resolve(destination)
	if address == nil then
		return false
	end
	return rednet.send(address, msg)
end

function deliverStartupQueue()
	for _, queuedMsg in ipairs(state.deliveryQueue) do
		sendCore(unpack(queuedMsg))
	end
	state.started = true
	state.deliveryQueue = nil
end

function sendRawMessage(destination, msg)
	if state.started then
		return sendCore(destination, msg)
	end
	-- Slow start algorithm to avoid overloading busy computers when the server is starting up.
	if os.clock() > 20 then
		state.started = true
		return sendCore(destination, msg)
	end
	if state.deliveryQueue then
		table.insert(state.deliveryQueue, {destination, msg})
		return true
	end
	state.deliveryQueue = {{destination, msg}}
	events.setTimer(math.random(10) + 5, deliverStartupQueue)
	return true
end

function createMessage(msgType, data)
	return {msgType, data}
end

function sendMessage(destination, msgType, data)
	return sendRawMessage(destination, createMessage(msgType, data))
end

function sendMessages(destination, messages)
	return sendRawMessage(destination, messages)
end

function broadcastMessage(destination, msgType, data)
	local recipients = {dns.resolve(destination)}
	for _, recipient in ipairs(recipients) do
		sendMessage(recipient, msgType, data)
	end
end

-- Message handlers
local rednetHandlers = util.initializeGlobalTable("rednetHandlers")

function pullMessage(msgType)
	-- TODO: Better to implement this with protocols, which weren't supported when this library was first written.
	while true do
		local senderId, msg = rednet.receive()
		if msg[1] == msgType then
			return msg[2]
		end
	end
end

function registerRawMessageHandler(msgType, handler)
	rednetHandlers[msgType] = handler
end

function registerRawLocalMessageHandler(msgType, handler)
	util.getCoroutineTable("rednetHandlers")[msgType] = handler
end

function registerMessageHandler(msgType, handler)
	registerRawMessageHandler(msgType, function(data) return handler(data[2]) end)
end

function registerLocalMessageHandler(msgType, handler)
	registerRawLocalMessageHandler(msgType, function(data) return handler(data[2]) end)
end

function removeHandler(msgType)
	rednetHandlers[msgType] = nil
end

function removeLocalHandler(msgType)
	util.getCoroutineTable("rednetHandlers")[msgType] = nil
end

function getRednetHandler(msgType)
	local handler = util.getCoroutineTable("rednetHandlers")[msgType]
	if handler == nil then
		handler = rednetHandlers[msgType]
	end
	return handler
end

function dispatchMessage(msg, sender, distance)
	local handler = getRednetHandler(msg[1])
	if handler ~= nil then
		return handler(msg, sender, distance)
	end
end

function handleRednetMessage(msgType, sender, msg, distance)
	if msg == nil then
		return
	end
	if type(msg[1]) == "table" then
		for _, subMessage in ipairs(msg) do
			if dispatchMessage(subMessage, sender, distance) == false then
				return false
			end
		end
	else
		return dispatchMessage(msg, sender, distance)
	end
end

events.registerHandler("rednet_message", handleRednetMessage)

registerRawMessageHandler("ping", function(data, sender)
	print(string.format("Ping received; sending reply to %i", sender))
	sendMessage(sender, "pingReply", {position = {gps.locate(5)}})
end)